<h2 class="text-center">Listado de Usuarios</h2>
<div class="text-center mb-3">
    <button onclick="window.location.href='/register';" class="btn btn-icon">
        <i class="fas fa-user-plus"></i> Agregar Usuario
    </button>
    <button onclick="deleteInactiveUsers();" class="btn btn-danger btn-icon">
        <i class="fas fa-user-slash"></i> Eliminar Inactivos
    </button>
</div>

{{#if users.length}}
<div class="container wide-container">
    <table class="user-table">
        <thead class="table-header">
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th class="last-connection-col">Última Conexión</th>
                <th>Rol</th>
                <th>Documentos</th>
                <th class="actions-col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            {{#each users}}
            <tr class="table-row">
                <td>{{this.first_name}}</td>
                <td>{{this.last_name}}</td>
                <td>{{this.email}}</td>
                <td class="last-connection-col">{{this.last_connection}}</td>
                <td><i class="fas {{#if (eq this.role 'user')}}fa-user{{else}} {{#if (eq this.role 'premium')}} fa-star {{else}} fa-cog{{/if}}{{/if}}"></i> {{this.role}}</td>
                <td>
                    {{#if this.documents.length}}
                    {{#each this.documents}}
                    <a href="{{this.reference}}" target="_blank" title="{{this.name}}">
                        <i class="fas fa-file-alt"></i>
                    </a>
                     
                    {{/each}}
                    {{else}}
                    <p>-</p>
                    {{/if}}
                </td>
                <td class="action-icons actions-col">
                    <a href="/edituser/{{this.id}}" title="Modificar"><i class="fas fa-edit"></i></a>
                    <a href="#" onclick="deleteUser('{{this.id}}'); return false;" title="Eliminar"><i class="fas fa-trash-alt"></i></a>
                    <a href="#" onclick="resetPassword('{{this.email}}'); return false;" title="Resetear Contraseña">
                        <i class="fas fa-key"></i>
                    </a>
 
                    <a href="mailto:{{this.email}}" title="Enviar Email"><i class="fas fa-envelope"></i></a>
                   
                   {{#unless (eq this.role "admin")}}
                        <a href="#" onclick="changeUserRole('{{this.id}}'); return false;" title="{{#if (eq this.role 'user')}}Upgrade a Premium{{else}}Downgrade a User{{/if}}">
                            <i class="fa {{#if (eq this.role 'user')}}fa-star{{else}}fa-user{{/if}}"></i>
                        </a>

                    {{/unless}}
                </td>
                
                
            </tr>
            {{/each}}
        </tbody>
    </table>
</div>
{{else}}
<p>No hay usuarios registrados.</p>
{{/if}}


<script>
function changeUserRole(userId) {
    // Crear la solicitud PUT
    fetch('/api/users/premium/' + userId, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json().then(data => {
        // Asegura que tanto respuestas exitosas como fallidas tengan su contenido parseado a JSON
        if (response.ok) {
            return data; // Continuar con el procesamiento normal si la respuesta es exitosa
        } else {
            // Si la respuesta no es exitosa, extraer el mensaje de error del cuerpo JSON y lanzar un error
            throw new Error(data.message+" "+data.reqDoc || `La solicitud falló con estado ${response.status}`);
        }
    }))
    .then(data => {
        // Mostrar una notificación de éxito con SweetAlert
        Swal.fire({
            title: '¡Éxito!',
            text: 'El rol del usuario ha sido actualizado.',
            icon: 'success',
            confirmButtonText: 'OK'
        }).then(result => {
            if (result.isConfirmed) {
                location.reload(); // Recargar la página para mostrar los cambios actualizados
            }
        });
    })
    .catch(error => {
        console.error('Error al realizar la solicitud:', error);
        // Mostrar el error con SweetAlert
        Swal.fire({
            title: 'Error',
            text: error.message, // Mostrar el mensaje de error extraído
            icon: 'error',
            confirmButtonText: 'Cerrar'
        });
    });
}



function deleteUser(userId) {
    Swal.fire({
        title: '¿Estás seguro?',
        text: "¿Quieres eliminar este usuario? (Esta acción eliminará también el carrito asociado)",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, eliminar!',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/api/users/' + userId, {
                method: 'DELETE',
            })
            .then(response => {
                if (response.ok) {
                    Swal.fire(
                        '¡Eliminado!',
                        'El usuario ha sido eliminado.',
                        'success'
                    ).then(() => window.location.reload());
                } else {
                    response.json().then(data => Swal.fire('Error', data.message, 'error'));
                }
            })
            .catch(error => Swal.fire('Error', 'Error al eliminar el usuario: ' + error, 'error'));
        }
    });
}

function deleteInactiveUsers() {
    Swal.fire({
        title: '¿Estás seguro?',
        text: "¿Deseas eliminar todos los usuarios inactivos por más de 30 días? (Esta acción eliminará también los carritos asociados)",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, eliminar todo!',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/api/users/delete-inactive', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        title: '¡Éxito!',
                        text: 'Todos los usuarios inactivos han sido eliminados.',
                        icon: 'success'
                    }).then(() => window.location.reload());
                } else {
                    response.json().then(data => Swal.fire('Error', data.message, 'error'));
                }
            })
            .catch(error => Swal.fire('Error', 'Error al eliminar usuarios inactivos: ' + error.message, 'error'));
        }
    });
}

function resetPassword(email) {
    console.log(email);
    fetch('/api/users/requestPasswordReset', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email: email })
    })
    .then(response => {
        console.log(response)
        if (response.ok) {
            Swal.fire({
                title: '¡Éxito!',
                text: 'Se ha enviado un correo para restablecer la contraseña.',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        } else {
            throw new Error('Error al solicitar el restablecimiento de la contraseña');
        }
    })
    .catch(error => {
        Swal.fire({
            title: 'Error',
            text: error.message,
            icon: 'error',
            confirmButtonText: 'Cerrar'
        });
    });
}
</script>
